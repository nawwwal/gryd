---
description: MDX system architecture, data flow, and frontend integration for THE GRYD magazine. Request for system architecture questions, React-Sanity integration, performance optimization systems, caching strategies, or content rendering pipeline.
globs:
alwaysApply: false
---
---
description: MDX content system architecture and component integration for THE GRYD magazine
alwaysApply: false
---

# MDX Content System Documentation

## System Overview
- **Status**: Production Ready ✅
- **Implementation Date**: 2024-06-21
- **Version**: 1.0.0
- **Technology Stack**: React + TypeScript + Sanity CMS + PortableText
- **Performance**: 40-90% faster loading, multi-layer caching

## Architecture

### Data Flow
```
Sanity CMS → Rich Content Renderer → React App
(Block Editor) → (PortableText) → (Component Library)
```

### Core Components
- **RichContentRenderer**: `src/components/RichContentRenderer.tsx`
- **Interactive Components**: `src/components/mdx/RichContentComponents.tsx`
- **Content Types**: `src/types/content.ts`
- **Styling**: `src/styles/rich-content.css`

## Content Block System

### Architecture Overview
The MDX system supports 7 interactive content block types for magazine-quality experiences:
- **Rich Text**: Formatted content with magazine typography
- **Code Demo**: Syntax-highlighted code with copy functionality
- **Image Gallery**: Multi-layout responsive galleries
- **Video Embed**: Platform-agnostic video integration
- **Project Timeline**: Interactive milestone tracking
- **Tech Stack**: Technology showcase with branding
- **Callout**: Styled information and alert boxes

For complete implementation details and usage examples, see `@content-blocks`.

## System Integration

### Component Architecture
The MDX system integrates three main layers:
1. **Sanity Schema Layer**: Content type definitions and validation
2. **React Component Layer**: Interactive block implementations
3. **Rendering Layer**: PortableText processing and component mapping

### Integration Points
- **Schema Definition**: See `@sanity-schemas` for development patterns
- **Component Implementation**: See `@content-blocks` for detailed examples
- **Performance Optimization**: See `@performance-optimization` for caching strategies

## Content Management Integration

### System Workflow
The MDX system supports end-to-end content management from creation to publication:
- **Content Creation**: Rich block editor in Sanity Studio
- **Real-time Preview**: Live content rendering during editing
- **Performance Optimization**: Automatic caching and optimization
- **Publication Pipeline**: One-click publishing with cache invalidation

### Data Flow Architecture
```yaml
content_pipeline:
  creation: "Sanity Studio → Rich Content Blocks"
  processing: "PortableText → React Components"
  optimization: "Multi-layer Caching → Performance"
  delivery: "CDN → User Experience"
```

For detailed workflow processes and content strategies, see `@content-workflows`.

## Performance Optimizations

### Caching Strategy
```yaml
layers:
  - browser_cache: "HTTP headers for static assets"
  - service_worker: "Programmable cache for all resources"
  - react_query: "Application-level state management"
  - sanity_client: "Request-level deduplication"

improvements:
  - initial_load: "40-60% faster"
  - subsequent_loads: "80-90% faster"
  - network_requests: "70-85% reduction"
  - data_usage: "30-50% reduction"
```

### Image Optimization
```yaml
features:
  - adaptive_quality: "Connection-aware (40-85% quality)"
  - format_optimization: "WebP conversion"
  - responsive_images: "srcset generation"
  - lazy_loading: "Intersection Observer"
  - lqip: "Low Quality Image Placeholders"
```

## Configuration

### Cache TTL Settings
```typescript
const CACHE_DURATIONS = {
  workProjects: 10 * 60 * 1000,      // 10 minutes
  playgroundExperiments: 10 * 60 * 1000,
  contentBySlug: 15 * 60 * 1000,     // 15 minutes
  sanityClient: 5 * 60 * 1000        // 5 minutes
}
```

### React Query Options
```typescript
const DEFAULT_QUERY_OPTIONS = {
  staleTime: 5 * 60 * 1000,          // 5 minutes
  gcTime: 30 * 60 * 1000,            // 30 minutes
  refetchOnWindowFocus: false,
  refetchOnMount: false,
  refetchOnReconnect: true
}
```

## Troubleshooting

### Common Issues
```yaml
content_not_rendering:
  causes: [schema_mismatch, unpublished_content, invalid_slug]
  solutions: [check_types, publish_changes, verify_slug]

images_not_loading:
  causes: [file_size_too_large, unsupported_format, missing_alt_text]
  solutions: [compress_images, use_supported_formats, add_alt_text]

performance_issues:
  tools: [react_query_devtools, performance_monitor, browser_devtools]
  metrics: [cache_hit_rate, loading_times, network_requests]
```

## Migration Status

### Backward Compatibility
```yaml
legacy_support:
  - markdown_content: "Still works with automatic fallback"
  - existing_projects: "No data loss, gradual migration"
  - content_types:
    - work_projects: "Full rich content support ✅"
    - playground_experiments: "Simple markdown (upgradeable)"
    - other_content: "Unaffected ✅"
```

## API Reference

### Hooks
```typescript
// Content fetching
useWorkProjects(options?: QueryOptions)
usePlaygroundExperiments(options?: QueryOptions)
useContentBySlug(slug: string, type: string)

// Cache management
useCacheManager()
usePrefetchContent()

// Performance monitoring
usePerformanceMonitor()
```

### Utilities
```typescript
// Image optimization
getOptimizedImageUrl(image: SanityImage, options: ImageOptions)
generateSrcSet(image: SanityImage, maxWidth: number)
getLQIP(image: SanityImage)

// Content rendering
RichContentRenderer({ content: ContentBlock[], className?: string })
```

## Quality Assurance

### Testing Checklist
```yaml
typescript: "Full type safety, no errors ✅"
components: "All render correctly ✅"
responsive: "Mobile, tablet, desktop ✅"
performance: "Optimized loading ✅"
accessibility: "Screen reader, keyboard navigation ✅"
browsers: "Chrome, Firefox, Safari, Edge ✅"
```

### Performance Targets
```yaml
metrics:
  - ttfb: "<200ms"
  - fcp: "<1.5s"
  - lcp: "<2.5s"
  - cache_hit_rate: ">80%"
  - data_usage_reduction: ">30%"
```

## Deployment Information

### URLs
```yaml
sanity_studio: "https://gryd.sanity.studio/"
local_development: "http://localhost:3333"
frontend_dev: "http://localhost:8080"
```

### Dependencies
```yaml
core:
  - "@portabletext/react": "Sanity content rendering"
  - "@sanity/image-url": "Image optimization"
  - "@tanstack/react-query": "Data fetching and caching"

optional:
  - "react-query-devtools": "Development debugging"
  - "performance-monitor": "Real-time metrics"
```

## Future Enhancements

### Planned System Improvements
```yaml
architecture:
  - component_lazy_loading: "Dynamic block imports"
  - server_side_rendering: "Static generation with rich content"
  - edge_rendering: "CDN-level content processing"
  - real_time_collaboration: "Live multi-user editing"

performance:
  - ml_prefetching: "Predictive content loading"
  - adaptive_quality: "AI-powered image optimization"
  - connection_awareness: "Network-adaptive experiences"
  - progressive_enhancement: "Graceful feature degradation"

integration:
  - headless_cms_abstraction: "Multi-CMS compatibility layer"
  - content_versioning: "Advanced diff and rollback"
  - analytics_pipeline: "Content engagement tracking"
```
