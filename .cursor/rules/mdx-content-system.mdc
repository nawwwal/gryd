---
description: Has contents related to MDX Rendering engine, how to add new compnents, MDX rendering pipeline from Sanity CMS to Rendering Engine to Frontend
globs:
alwaysApply: false
---
# MDX Content System Documentation

## System Overview
- **Status**: Production Ready ✅
- **Implementation Date**: 2024-06-21
- **Version**: 1.0.0
- **Technology Stack**: React + TypeScript + Sanity CMS + PortableText
- **Performance**: 40-90% faster loading, multi-layer caching

## Architecture

### Data Flow
```
Sanity CMS → Rich Content Renderer → React App
(Block Editor) → (PortableText) → (Component Library)
```

### Core Components
- **RichContentRenderer**: `src/components/RichContentRenderer.tsx`
- **Interactive Components**: `src/components/mdx/RichContentComponents.tsx`
- **Content Types**: `src/types/content.ts`
- **Styling**: `src/styles/rich-content.css`

## Available Content Blocks

### 1. Rich Text Block
```yaml
type: block
features: [headings, lists, formatting, links, code_snippets]
use_cases: [paragraphs, main_content, structured_text]
```

### 2. Code Demo
```yaml
type: codeDemo
features: [syntax_highlighting, copy_button, language_support]
languages: [javascript, typescript, python, css, html, json, bash]
props:
  - title: string (optional)
  - language: string (default: javascript)
  - code: string (required)
  - description: string (optional)
```

### 3. Image Gallery
```yaml
type: imageGallery
layouts: [grid, masonry, carousel, before-after]
features: [lightbox, lazy_loading, captions, responsive]
props:
  - title: string (optional)
  - layout: enum [grid, masonry, carousel, before-after]
  - images: SanityImage[]
  - caption: string (optional)
```

### 4. Video Embed
```yaml
type: videoEmbed
platforms: [youtube, vimeo, direct_video]
features: [autoplay_options, responsive_sizing]
props:
  - title: string (optional)
  - url: string (required)
  - caption: string (optional)
  - autoplay: boolean (default: false)
```

### 5. Project Timeline
```yaml
type: projectTimeline
features: [status_indicators, interactive_milestones]
status_types: [completed, in-progress, planned, cancelled]
props:
  - title: string (optional)
  - events: TimelineEvent[]
```

### 6. Tech Stack
```yaml
type: techStack
features: [icons, brand_colors, categories, hover_effects]
props:
  - title: string (optional)
  - categories: TechCategory[]
```

### 7. Callout
```yaml
type: callout
types: [info, warning, success, error, note]
features: [automatic_icons, color_coding]
props:
  - type: enum [info, warning, success, error, note]
  - title: string (optional)
  - content: string (required)
```

## Implementation Guide

### Adding New Content Block
1. **Define Schema** in `gryd/schemaTypes/workProject.ts`:
```javascript
{
  type: 'object',
  name: 'customComponent',
  title: 'Custom Component',
  fields: [/* field definitions */]
}
```

2. **Create React Component** in `RichContentComponents.tsx`:
```typescript
export const CustomComponent = ({ ...props }) => {
  return <div className="custom-component">{/* implementation */}</div>
}
```

3. **Register in Renderer** in `RichContentRenderer.tsx`:
```typescript
types: {
  customComponent: ({ value }) => <CustomComponent {...value} />
}
```

## Content Management Workflows

### Creating Projects
```yaml
steps:
  1. access_studio: "https://gryd.sanity.studio/"
  2. navigate: "Work Project → Create new"
  3. basic_info: [title, subtitle, description, timeline, impact]
  4. metadata: [type, category, status, tags, featured]
  5. visual_assets: [hero_image, attachments]
  6. rich_content: [add_blocks, configure_settings]
  7. publish: "Make live for public viewing"
```

### Content Organization
```yaml
categorization:
  - use_consistent_categories: true
  - tag_strategically: true
  - status_management: [live, prototype, archived, ongoing, draft]
  - featured_projects: "limit to 3-5 most impressive"

quality_standards:
  - consistent_voice: true
  - visual_standards: "1200px+ width images"
  - code_examples: "tested and functional"
  - accessibility: "alt text and captions required"
```

## Performance Optimizations

### Caching Strategy
```yaml
layers:
  - browser_cache: "HTTP headers for static assets"
  - service_worker: "Programmable cache for all resources"
  - react_query: "Application-level state management"
  - sanity_client: "Request-level deduplication"

improvements:
  - initial_load: "40-60% faster"
  - subsequent_loads: "80-90% faster"
  - network_requests: "70-85% reduction"
  - data_usage: "30-50% reduction"
```

### Image Optimization
```yaml
features:
  - adaptive_quality: "Connection-aware (40-85% quality)"
  - format_optimization: "WebP conversion"
  - responsive_images: "srcset generation"
  - lazy_loading: "Intersection Observer"
  - lqip: "Low Quality Image Placeholders"
```

## Configuration

### Cache TTL Settings
```typescript
const CACHE_DURATIONS = {
  workProjects: 10 * 60 * 1000,      // 10 minutes
  playgroundExperiments: 10 * 60 * 1000,
  contentBySlug: 15 * 60 * 1000,     // 15 minutes
  sanityClient: 5 * 60 * 1000        // 5 minutes
}
```

### React Query Options
```typescript
const DEFAULT_QUERY_OPTIONS = {
  staleTime: 5 * 60 * 1000,          // 5 minutes
  gcTime: 30 * 60 * 1000,            // 30 minutes
  refetchOnWindowFocus: false,
  refetchOnMount: false,
  refetchOnReconnect: true
}
```

## Troubleshooting

### Common Issues
```yaml
content_not_rendering:
  causes: [schema_mismatch, unpublished_content, invalid_slug]
  solutions: [check_types, publish_changes, verify_slug]

images_not_loading:
  causes: [file_size_too_large, unsupported_format, missing_alt_text]
  solutions: [compress_images, use_supported_formats, add_alt_text]

performance_issues:
  tools: [react_query_devtools, performance_monitor, browser_devtools]
  metrics: [cache_hit_rate, loading_times, network_requests]
```

## Migration Status

### Backward Compatibility
```yaml
legacy_support:
  - markdown_content: "Still works with automatic fallback"
  - existing_projects: "No data loss, gradual migration"
  - content_types:
    - work_projects: "Full rich content support ✅"
    - playground_experiments: "Simple markdown (upgradeable)"
    - other_content: "Unaffected ✅"
```

## API Reference

### Hooks
```typescript
// Content fetching
useWorkProjects(options?: QueryOptions)
usePlaygroundExperiments(options?: QueryOptions)
useContentBySlug(slug: string, type: string)

// Cache management
useCacheManager()
usePrefetchContent()

// Performance monitoring
usePerformanceMonitor()
```

### Utilities
```typescript
// Image optimization
getOptimizedImageUrl(image: SanityImage, options: ImageOptions)
generateSrcSet(image: SanityImage, maxWidth: number)
getLQIP(image: SanityImage)

// Content rendering
RichContentRenderer({ content: ContentBlock[], className?: string })
```

## Quality Assurance

### Testing Checklist
```yaml
typescript: "Full type safety, no errors ✅"
components: "All render correctly ✅"
responsive: "Mobile, tablet, desktop ✅"
performance: "Optimized loading ✅"
accessibility: "Screen reader, keyboard navigation ✅"
browsers: "Chrome, Firefox, Safari, Edge ✅"
```

### Performance Targets
```yaml
metrics:
  - ttfb: "<200ms"
  - fcp: "<1.5s"
  - lcp: "<2.5s"
  - cache_hit_rate: ">80%"
  - data_usage_reduction: ">30%"
```

## Deployment Information

### URLs
```yaml
sanity_studio: "https://gryd.sanity.studio/"
local_development: "http://localhost:3333"
frontend_dev: "http://localhost:8080"
```

### Dependencies
```yaml
core:
  - "@portabletext/react": "Sanity content rendering"
  - "@sanity/image-url": "Image optimization"
  - "@tanstack/react-query": "Data fetching and caching"

optional:
  - "react-query-devtools": "Development debugging"
  - "performance-monitor": "Real-time metrics"
```

## Future Enhancements

### Planned Features
```yaml
short_term:
  - playground_experiments_upgrade: "Rich content support"
  - custom_blocks: "Project-specific components"
  - analytics_integration: "Content engagement metrics"

long_term:
  - http3_support: "When available in browsers"
  - ml_prefetching: "Content prediction"
  - edge_caching: "CDN-level optimizations"
  - real_user_monitoring: "Performance analytics"
```
