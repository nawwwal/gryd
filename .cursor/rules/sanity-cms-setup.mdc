---
description: Anything related to Sanity, CMS or data source. it is wehre i store all hte data related to my projects and experiments.
globs:
alwaysApply: false
---
# Sanity CMS Setup & Configuration

## System Status
- **Studio URL**: https://gryd.sanity.studio/
- **Local Dev URL**: http://localhost:3333
- **Project ID**: c0rjrvm3
- **Dataset**: production
- **Status**: Production Ready ✅

## Project Structure
```yaml
gryd/                              # Sanity Studio Directory
├── schemaTypes/                   # Content Schemas
│   ├── workProject.ts            # Work Projects Schema ✅
│   ├── playgroundExperiment.ts   # Playground Experiments Schema ✅
│   └── index.ts                  # Schema Index ✅
├── sanity.config.ts              # Studio Configuration ✅
├── sanity.cli.ts                 # CLI Configuration ✅
└── package.json                  # Dependencies ✅
```

## Content Types

### Work Projects Schema
```yaml
type: workProject
fields:
  basic_info:
    - title: string (required)
    - subtitle: string (required)
    - slug: slug (auto-generated, required)
    - description: text (required)
    - timeline: string (required)
    - impact: string (required)

  content:
    - content: array (rich content blocks)
    - contentLegacy: text (markdown fallback, hidden)

  media:
    - heroImage: image (with hotspot, alt text)
    - gallery: array[image] (legacy, hidden)
    - attachments: array[file] (with title, description)

  metadata:
    - type: enum [photography, code, blog, prototype, research, visual, note]
    - category: string (required)
    - status: enum [live, prototype, archived, ongoing, draft]
    - featured: boolean (default: false)
    - publishDate: date (required)
    - lastUpdated: date (required)
    - tools: array[string]
    - tags: array[string]
    - difficulty: enum [Beginner, Intermediate, Advanced, Expert]
    - interactive:
      - hasDemo: boolean (default: false)
      - demoUrl: url
      - codeUrl: url
```

### Playground Experiments Schema
```yaml
type: playgroundExperiment
fields:
  basic_info:
    - title: string (required)
    - subtitle: string (required)
    - slug: slug (auto-generated, required)
    - description: text (required)
    - intensity: enum [low, medium, high] (required)
    - visual: enum [geometric, photographic, interactive, analytical, colorful, technical, motion, typographic] (required)

  content:
    - content: text (simple markdown)

  media:
    - heroImage: image (with hotspot, alt text)
    - gallery: array[image]
    - attachments: array[file]

  metadata:
    - same as workProject metadata structure
```

## Rich Content Blocks (Work Projects Only)

### Available Block Types
```yaml
rich_text_block:
  type: block
  styles: [normal, h2, h3, h4, blockquote]
  lists: [bullet, number]
  marks: [strong, em, code, strike-through, link]

code_demo:
  type: object
  fields: [title, language, code, description]
  languages: [javascript, typescript, python, css, html, json, bash]

image_gallery:
  type: object
  fields: [title, layout, images, caption]
  layouts: [grid, masonry, carousel, before-after]

video_embed:
  type: object
  fields: [title, url, caption, autoplay]
  platforms: [youtube, vimeo, direct_video]

project_timeline:
  type: object
  fields: [title, events]
  event_status: [completed, in-progress, planned, cancelled]

tech_stack:
  type: object
  fields: [title, categories]
  category_fields: [category, technologies]

callout:
  type: object
  fields: [type, title, content]
  types: [info, warning, success, error, note]
```

## Image Management

### Native Upload Features
```yaml
automatic_processing:
  - metadata_extraction: "Dimensions, color palettes, EXIF data"
  - smart_cropping: "Hotspot functionality for responsive design"
  - format_optimization: "WebP conversion, compression"
  - cdn_delivery: "Global content delivery via Sanity CDN"

image_transformations:
  - width: "Custom width"
  - height: "Custom height"
  - crop: "center, top, bottom, left, right"
  - format: "webp, jpg, png"
  - quality: "1-100"

metadata_included:
  - always: [dimensions, transparency, aspect_ratio]
  - generated: [color_palettes, blur_hashes, lqip_placeholders]
  - optional: [exif_data, location_information]
```

### Image URL Builder Usage
```typescript
import imageUrlBuilder from '@sanity/image-url'
import client from '../lib/sanityClient'

const builder = imageUrlBuilder(client)

export function urlFor(source: any) {
  return builder.image(source)
}

// Usage examples
const heroUrl = urlFor(project.heroImage)
  .width(1200)
  .height(600)
  .crop('center')
  .format('webp')
  .url()
```

## Development Workflow

### Commands
```yaml
local_development:
  command: "cd gryd && npm run dev"
  url: "http://localhost:3333"

deployment:
  command: "cd gryd && npx sanity deploy"
  url: "https://gryd.sanity.studio/"

build:
  command: "cd gryd && npm run build"
  purpose: "Production build"

schema_deployment:
  command: "cd gryd && npx sanity schema deploy"
  purpose: "Deploy schema changes"
```

### Content Management
```yaml
create_content:
  - access_studio: "https://gryd.sanity.studio/"
  - navigate: "Content type → Create new"
  - fill_fields: "Required and optional fields"
  - publish: "Make content live"

update_content:
  - open_document: "Click on existing content"
  - edit_fields: "Modify any field"
  - save_changes: "Auto-saved as draft"
  - publish: "Make changes live"

content_organization:
  - search: "Use search bar for specific content"
  - filter: "Filter by status, type, featured"
  - sort: "Sort by date, title, status"
  - bulk_operations: "Select multiple for bulk actions"
```

## Configuration Files

### Studio Configuration (sanity.config.ts)
```typescript
export default defineConfig({
  name: 'default',
  title: 'gryd',
  projectId: 'c0rjrvm3',
  dataset: 'production',
  plugins: [
    structureTool(),
    visionTool(),
  ],
  schema: {
    types: schemaTypes,
  },
})
```

### CLI Configuration (sanity.cli.ts)
```typescript
export default defineCliConfig({
  api: {
    projectId: 'c0rjrvm3',
    dataset: 'production'
  },
  autoUpdates: true,
  studioHost: 'gryd'
})
```

## Content Queries (GROQ)

### Work Projects Query
```groq
*[_type == "workProject"]|order(metadata.publishDate desc){
  "slug": slug.current,
  title,
  subtitle,
  description,
  timeline,
  impact,
  content,
  contentLegacy,
  heroImage{
    asset->,
    alt,
    hotspot
  },
  gallery[]{
    asset->,
    alt,
    caption,
    hotspot
  },
  attachments[]{
    asset->,
    title,
    description
  },
  metadata
}
```

### Featured Projects Query
```groq
*[_type == "workProject" && metadata.featured == true] {
  title,
  subtitle,
  slug,
  heroImage,
  metadata
} | order(metadata.publishDate desc)
```

### Single Project Query
```groq
*[_type == "workProject" && slug.current == $slug][0]{
  // all fields
}
```

## Security & Access

### Project-Level Access
```yaml
access_control:
  - team_collaboration: "Available via Sanity"
  - role_based_permissions: "Configurable in Sanity dashboard"
  - cors_configuration: "Automatically configured for hosted studio"

security_features:
  - authentication: "Sanity account required"
  - authorization: "Project-level permissions"
  - data_validation: "Schema-based validation"
  - content_versioning: "Built-in version history"
```

## Integration with Frontend

### Sanity Client Configuration
```typescript
// src/lib/sanityClient.ts
import { createClient } from '@sanity/client'

export const client = createClient({
  projectId: 'c0rjrvm3',
  dataset: 'production',
  useCdn: true,
  apiVersion: '2024-01-01',
})
```

### Content Loading Functions
```typescript
// src/utils/contentLoader.ts
export async function getWorkProjects() {
  return await client.fetch(workProjectsQuery)
}

export async function getContentBySlug(slug: string, type: string) {
  return await client.fetch(contentBySlugQuery, { slug, type })
}
```

## Performance Considerations

### CDN Optimization
```yaml
content_delivery:
  - global_distribution: "Sanity CDN"
  - automatic_caching: "Content-based URLs"
  - image_optimization: "On-the-fly transformations"
  - compression: "Automatic gzip compression"

caching_strategy:
  - browser_cache: "Long TTL for assets"
  - cdn_cache: "Global edge caching"
  - application_cache: "React Query integration"
  - smart_invalidation: "Content-based cache keys"
```

## Troubleshooting

### Common Issues
```yaml
studio_not_loading:
  causes: [network_issues, authentication_problems, project_configuration]
  solutions: [check_connection, re-authenticate, verify_config]

content_not_syncing:
  causes: [unpublished_changes, cache_issues, query_problems]
  solutions: [publish_content, clear_cache, check_queries]

image_upload_failures:
  causes: [file_size_limits, format_issues, network_problems]
  solutions: [compress_images, use_supported_formats, check_connection]

schema_deployment_errors:
  causes: [validation_errors, breaking_changes, network_issues]
  solutions: [fix_validation, gradual_migration, retry_deployment]
```

### Debug Tools
```yaml
development:
  - sanity_vision: "Query testing and debugging"
  - browser_devtools: "Network and console debugging"
  - studio_console: "Built-in error reporting"

production:
  - sanity_dashboard: "Project monitoring"
  - usage_analytics: "Content and API usage"
  - performance_metrics: "Response times and availability"
```

## Backup & Recovery

### Data Management
```yaml
content_backup:
  - export_datasets: "Sanity CLI export commands"
  - version_history: "Built-in content versioning"
  - point_in_time_recovery: "Dataset snapshots"

disaster_recovery:
  - schema_backup: "Version controlled in git"
  - content_export: "Regular automated exports"
  - configuration_backup: "Studio config in repository"
```

## Future Enhancements

### Planned Improvements
```yaml
content_types:
  - playground_rich_content: "Upgrade experiments to rich content"
  - custom_blocks: "Project-specific content blocks"
  - workflow_automation: "Content approval workflows"

performance:
  - edge_functions: "Serverless content processing"
  - advanced_caching: "Multi-layer cache strategies"
  - real_time_collaboration: "Live editing features"

integrations:
  - webhook_automation: "Deployment triggers"
  - analytics_integration: "Content performance tracking"
  - search_optimization: "Advanced content search"
```
